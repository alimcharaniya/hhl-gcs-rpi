"use strict";
var chai_1 = require('chai');
var can = require('../dist/rawcan');
describe('can Socket', function () {
    describe('constructor', function () {
        it('constructs default', function () {
            var sock = new can.Socket();
        });
        it('constructs with interface', function () {
            var sock = new can.Socket('vcan0');
        });
        it('createsSocket', function () {
            var sock = can.createSocket();
        });
    });
    describe('bind', function () {
        it('binds to vcan0', function () {
            var sock = new can.Socket();
            sock.bind('vcan0');
            sock.close();
        });
        it('fails to bind', function () {
            var sock = new can.Socket();
            chai_1.expect(function () { sock.bind('bogus'); }).to.throw(Error);
        });
    });
    describe('send', function () {
        it('sends a CAN2.0A buffer', function (done) {
            var sock = can.createSocket('vcan0');
            sock.send(0x34, new Buffer([0xDE, 0xAD, 0xBE, 0xEF]), function () {
                sock.close();
                done();
            });
        });
        it('sends a CAN2.0B buffer', function (done) {
            var sock = can.createSocket('vcan0');
            sock.send(can.EFF_FLAG | 0x34 >>> 0, new Buffer([0xDE, 0xAD, 0xBE, 0xEF]), function () {
                sock.close();
                done();
            });
        });
        it('sends a string', function (done) {
            var sock = can.createSocket();
            sock.bind('vcan0');
            sock.send(0x34, 'asdf', function () {
                sock.close();
                done();
            });
        });
        it('sends a byte array', function (done) {
            var sock = can.createSocket();
            sock.bind('vcan0');
            sock.send(0x34, [1, 4, 2], function () {
                sock.close();
                done();
            });
        });
        it('triggers callback', function (done) {
            var sock = new can.Socket();
            sock.bind('vcan0');
            sock.send(0x34, new Buffer([0xca, 0xfe]), function (err) {
                if (err) {
                    throw Error('Error: ' + err);
                }
                sock.close();
                done();
            });
        });
        it('sends two frames', function (done) {
            var sock = new can.Socket();
            sock.bind('vcan0');
            sock.send(0x34, new Buffer([0x12, 0x34]));
            sock.send(0x34, new Buffer([0x56, 0x78]), function (err) { done(); });
        });
    });
    describe('recv', function () {
        it('receives a message', function (done) {
            var server = new can.Socket('vcan0');
            server.on('message', function (id, buffer) {
                server.close();
                done();
            });
            var client = new can.Socket('vcan0');
            client.send(86, 'hello');
        });
    });
    describe('setFilter', function () {
        it('filters frames', function (done) {
            var filteredId = 86;
            var server = new can.Socket('vcan0');
            server.setFilter(filteredId, 0xff);
            server.on('message', function (id, buffer) {
                server.close();
                chai_1.expect(id).to.equal(filteredId);
                done();
            });
            var client = new can.Socket('vcan0');
            client.send(1, 'foo');
            client.send(99, 'bar');
            client.send(filteredId, 'hello');
            client.send(39, 'bar');
        });
    });
});
